diff --git a/node_modules/use-sound/dist/use-sound.cjs.development.js b/node_modules/use-sound/dist/use-sound.cjs.development.js
index 96e4b33..45c841b 100644
--- a/node_modules/use-sound/dist/use-sound.cjs.development.js
+++ b/node_modules/use-sound/dist/use-sound.cjs.development.js
@@ -63,22 +63,18 @@ function useOnMount(callback) {
   React.useEffect(callback, []);
 }
 
-function useSound(url, _ref) {
-  if (_ref === void 0) {
-    _ref = {};
-  }
-
-  var _ref2 = _ref,
-      _ref2$volume = _ref2.volume,
-      volume = _ref2$volume === void 0 ? 1 : _ref2$volume,
-      _ref2$playbackRate = _ref2.playbackRate,
-      playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,
-      _ref2$soundEnabled = _ref2.soundEnabled,
-      soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,
-      _ref2$interrupt = _ref2.interrupt,
-      interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,
-      onload = _ref2.onload,
-      delegated = _objectWithoutPropertiesLoose(_ref2, ["volume", "playbackRate", "soundEnabled", "interrupt", "onload"]);
+function useSound(url, _temp) {
+  var _ref = _temp === void 0 ? {} : _temp,
+      _ref$volume = _ref.volume,
+      volume = _ref$volume === void 0 ? 1 : _ref$volume,
+      _ref$playbackRate = _ref.playbackRate,
+      playbackRate = _ref$playbackRate === void 0 ? 1 : _ref$playbackRate,
+      _ref$soundEnabled = _ref.soundEnabled,
+      soundEnabled = _ref$soundEnabled === void 0 ? true : _ref$soundEnabled,
+      _ref$interrupt = _ref.interrupt,
+      interrupt = _ref$interrupt === void 0 ? false : _ref$interrupt,
+      onload = _ref.onload,
+      delegated = _objectWithoutPropertiesLoose(_ref, ["volume", "playbackRate", "soundEnabled", "interrupt", "onload"]);
 
   var HowlConstructor = React__default.useRef(null);
   var isMounted = React__default.useRef(false);
@@ -179,7 +175,7 @@ function useSound(url, _ref) {
     if (isMounted.current) {
       sound.once('end', function () {
         // If sound is not looping
-        if (!sound.playing()) {
+        if (isMounted.current && !sound.playing()) {
           setIsPlaying(false);
         }
       });
diff --git a/node_modules/use-sound/dist/use-sound.cjs.development.js.map b/node_modules/use-sound/dist/use-sound.cjs.development.js.map
index 4e98589..6af40a1 100644
--- a/node_modules/use-sound/dist/use-sound.cjs.development.js.map
+++ b/node_modules/use-sound/dist/use-sound.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"use-sound.cjs.development.js","sources":["../src/use-on-mount.ts","../src/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (!sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n"],"names":["useOnMount","callback","React","useSound","url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause","returnedValue"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"use-sound.cjs.development.js","sources":["../src/use-on-mount.ts","../src/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (isMounted.current && !sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n"],"names":["useOnMount","callback","React","useSound","url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause","returnedValue"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/use-sound/dist/use-sound.cjs.production.min.js b/node_modules/use-sound/dist/use-sound.cjs.production.min.js
index d224d8a..2466fdf 100644
--- a/node_modules/use-sound/dist/use-sound.cjs.production.min.js
+++ b/node_modules/use-sound/dist/use-sound.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=require("react"),n=(e=t)&&"object"==typeof e&&"default"in e?e.default:e;function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}exports.default=function(e,u){void 0===u&&(u={});var o=u.volume,a=void 0===o?1:o,c=u.playbackRate,i=void 0===c?1:c,l=u.soundEnabled,f=void 0===l||l,s=u.interrupt,d=void 0!==s&&s,p=u.onload,v=function(e,t){if(null==e)return{};var n,r,u={},o=Object.keys(e);for(r=0;r<o.length;r++)t.indexOf(n=o[r])>=0||(u[n]=e[n]);return u}(u,["volume","playbackRate","soundEnabled","interrupt","onload"]),b=n.useRef(null),y=n.useRef(!1),O=n.useState(!1),h=O[0],k=O[1],g=n.useState(null),j=g[0],m=g[1],w=n.useState(null),E=w[0],P=w[1],R=function(){"function"==typeof p&&p.call(this),y.current&&m(1e3*this.duration())};t.useEffect((function(){return new Promise((function(e){e(function(e){if(e&&e.__esModule)return e;var t={};return e&&Object.keys(e).forEach((function(n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})})),t.default=e,t}(require("howler")))})).then((function(t){if(!y.current){b.current=t.Howl,y.current=!0;var n=new b.current(r({src:[e],volume:a,rate:i,onload:R},v));P(n)}})),function(){y.current=!1}}),[]),n.useEffect((function(){b.current&&E&&P(new b.current(r({src:[e],volume:a,onload:R},v)))}),[e]),n.useEffect((function(){E&&(E.volume(a),E.rate(i))}),[a,i]);var S=n.useCallback((function(e){void 0===e&&(e={}),E&&(f||e.forceSoundEnabled)&&(d&&E.stop(),e.playbackRate&&E.rate(e.playbackRate),E.play(e.id),y.current&&E.once("end",(function(){E.playing()||k(!1)})),y.current&&k(!0))}),[E,f,d]),_=n.useCallback((function(e){E&&(E.stop(e),y.current&&k(!1))}),[E]),x=n.useCallback((function(e){E&&(E.pause(e),y.current&&k(!1))}),[E]);return[S,{sound:E,stop:_,pause:x,isPlaying:h,duration:j}]};
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=require("react"),n=(e=t)&&"object"==typeof e&&"default"in e?e.default:e;function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}exports.default=function(e,u){var o=void 0===u?{}:u,a=o.volume,c=void 0===a?1:a,i=o.playbackRate,l=void 0===i?1:i,f=o.soundEnabled,s=void 0===f||f,d=o.interrupt,p=void 0!==d&&d,v=o.onload,b=function(e,t){if(null==e)return{};var n,r,u={},o=Object.keys(e);for(r=0;r<o.length;r++)t.indexOf(n=o[r])>=0||(u[n]=e[n]);return u}(o,["volume","playbackRate","soundEnabled","interrupt","onload"]),y=n.useRef(null),O=n.useRef(!1),h=n.useState(!1),k=h[0],g=h[1],j=n.useState(null),m=j[0],w=j[1],E=n.useState(null),P=E[0],R=E[1],S=function(){"function"==typeof v&&v.call(this),O.current&&w(1e3*this.duration())};t.useEffect((function(){return new Promise((function(e){e(function(e){if(e&&e.__esModule)return e;var t={};return e&&Object.keys(e).forEach((function(n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})})),t.default=e,t}(require("howler")))})).then((function(t){if(!O.current){y.current=t.Howl,O.current=!0;var n=new y.current(r({src:[e],volume:c,rate:l,onload:S},b));R(n)}})),function(){O.current=!1}}),[]),n.useEffect((function(){y.current&&P&&R(new y.current(r({src:[e],volume:c,onload:S},b)))}),[e]),n.useEffect((function(){P&&(P.volume(c),P.rate(l))}),[c,l]);var _=n.useCallback((function(e){void 0===e&&(e={}),P&&(s||e.forceSoundEnabled)&&(p&&P.stop(),e.playbackRate&&P.rate(e.playbackRate),P.play(e.id),O.current&&P.once("end",(function(){O.current&&!P.playing()&&g(!1)})),O.current&&g(!0))}),[P,s,p]),x=n.useCallback((function(e){P&&(P.stop(e),O.current&&g(!1))}),[P]),C=n.useCallback((function(e){P&&(P.pause(e),O.current&&g(!1))}),[P]);return[_,{sound:P,stop:x,pause:C,isPlaying:k,duration:m}]};
 //# sourceMappingURL=use-sound.cjs.production.min.js.map
diff --git a/node_modules/use-sound/dist/use-sound.cjs.production.min.js.map b/node_modules/use-sound/dist/use-sound.cjs.production.min.js.map
index 02dc141..3a29963 100644
--- a/node_modules/use-sound/dist/use-sound.cjs.production.min.js.map
+++ b/node_modules/use-sound/dist/use-sound.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"use-sound.cjs.production.min.js","sources":["../src/index.ts","../src/use-on-mount.ts"],"sourcesContent":["import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (!sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","React","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","this","current","then","mod","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause"],"mappings":"4XAOEA,oBAQiB,YANfC,OAAAA,aAAS,QACTC,aAAAA,aAAe,QACfC,aAAAA,oBACAC,UAAAA,gBACAC,IAAAA,OACGC,sMAGCC,EAAkBC,EAAMC,OAA0B,MAClDC,EAAYF,EAAMC,QAAO,KAEGD,EAAMG,UAAS,GAA1CC,OAAWC,SACcL,EAAMG,SAAwB,MAAvDG,OAAUC,SAESP,EAAMG,SAAsB,MAA/CK,OAAOC,OAERC,EAAa,WACK,mBAAXb,GAETA,EAAOc,KAAKC,MAGVV,EAAUW,SAEZN,EAA8B,IAAlBK,KAAKN,aC9BrBN,aDmCW,gSACF,eAAUc,MAAK,SAAAC,OACfb,EAAUW,QAAS,CACtBd,EAAgBc,QAAUE,EAAIC,KAC9Bd,EAAUW,SAAU,MAEdL,EAAQ,IAAIT,EAAgBc,WAChCI,IAAK,CAACzB,GACNC,OAAAA,EACAyB,KAAMxB,EACNG,OAAQa,GACLZ,IAGLW,EAASD,OAIN,WACLN,EAAUW,SAAU,KCtDE,ID6D1Bb,EAAMmB,WAAU,WACVpB,EAAgBc,SAAWL,GAC7BC,EACE,IAAIV,EAAgBc,WAClBI,IAAK,CAACzB,GACNC,OAAAA,EACAI,OAAQa,GACLZ,OAQR,CAACN,IAIJQ,EAAMmB,WAAU,WACVX,IACFA,EAAMf,OAAOA,GACbe,EAAMU,KAAKxB,MAOZ,CAACD,EAAQC,QAEN0B,EAAqBpB,EAAMqB,aAC/B,SAACC,QACwB,IAAZA,IACTA,EAAU,IAGPd,IAAWb,GAAiB2B,EAAQC,qBAIrC3B,GACFY,EAAMgB,OAGJF,EAAQ5B,cACVc,EAAMU,KAAKI,EAAQ5B,cAGrBc,EAAMY,KAAKE,EAAQG,IAEfvB,EAAUW,SACZL,EAAMkB,KAAK,OAAO,WAEXlB,EAAMmB,WACTtB,GAAa,MAKfH,EAAUW,SACZR,GAAa,MAGjB,CAACG,EAAOb,EAAcC,IAGlB4B,EAAOxB,EAAMqB,aACjB,SAAAI,GACOjB,IAGLA,EAAMgB,KAAKC,GAEPvB,EAAUW,SACZR,GAAa,MAGjB,CAACG,IAGGoB,EAAQ5B,EAAMqB,aAClB,SAAAI,GACOjB,IAGLA,EAAMoB,MAAMH,GAERvB,EAAUW,SACZR,GAAa,MAGjB,CAACG,UAGkC,CACnCY,EACA,CACEZ,MAAAA,EACAgB,KAAAA,EACAI,MAAAA,EACAxB,UAAAA,EACAE,SAAAA"}
\ No newline at end of file
+{"version":3,"file":"use-sound.cjs.production.min.js","sources":["../src/index.ts","../src/use-on-mount.ts"],"sourcesContent":["import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (isMounted.current && !sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","React","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","this","current","then","mod","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause"],"mappings":"4XAOEA,sBAQiB,SANfC,OAAAA,aAAS,QACTC,aAAAA,aAAe,QACfC,aAAAA,oBACAC,UAAAA,gBACAC,IAAAA,OACGC,sMAGCC,EAAkBC,EAAMC,OAA0B,MAClDC,EAAYF,EAAMC,QAAO,KAEGD,EAAMG,UAAS,GAA1CC,OAAWC,SACcL,EAAMG,SAAwB,MAAvDG,OAAUC,SAESP,EAAMG,SAAsB,MAA/CK,OAAOC,OAERC,EAAa,WACK,mBAAXb,GAETA,EAAOc,KAAKC,MAGVV,EAAUW,SAEZN,EAA8B,IAAlBK,KAAKN,aC9BrBN,aDmCW,gSACF,eAAUc,MAAK,SAAAC,OACfb,EAAUW,QAAS,CACtBd,EAAgBc,QAAUE,EAAIC,KAC9Bd,EAAUW,SAAU,MAEdL,EAAQ,IAAIT,EAAgBc,WAChCI,IAAK,CAACzB,GACNC,OAAAA,EACAyB,KAAMxB,EACNG,OAAQa,GACLZ,IAGLW,EAASD,OAIN,WACLN,EAAUW,SAAU,KCtDE,ID6D1Bb,EAAMmB,WAAU,WACVpB,EAAgBc,SAAWL,GAC7BC,EACE,IAAIV,EAAgBc,WAClBI,IAAK,CAACzB,GACNC,OAAAA,EACAI,OAAQa,GACLZ,OAQR,CAACN,IAIJQ,EAAMmB,WAAU,WACVX,IACFA,EAAMf,OAAOA,GACbe,EAAMU,KAAKxB,MAOZ,CAACD,EAAQC,QAEN0B,EAAqBpB,EAAMqB,aAC/B,SAACC,QACwB,IAAZA,IACTA,EAAU,IAGPd,IAAWb,GAAiB2B,EAAQC,qBAIrC3B,GACFY,EAAMgB,OAGJF,EAAQ5B,cACVc,EAAMU,KAAKI,EAAQ5B,cAGrBc,EAAMY,KAAKE,EAAQG,IAEfvB,EAAUW,SACZL,EAAMkB,KAAK,OAAO,WAEZxB,EAAUW,UAAYL,EAAMmB,WAC9BtB,GAAa,MAKfH,EAAUW,SACZR,GAAa,MAGjB,CAACG,EAAOb,EAAcC,IAGlB4B,EAAOxB,EAAMqB,aACjB,SAAAI,GACOjB,IAGLA,EAAMgB,KAAKC,GAEPvB,EAAUW,SACZR,GAAa,MAGjB,CAACG,IAGGoB,EAAQ5B,EAAMqB,aAClB,SAAAI,GACOjB,IAGLA,EAAMoB,MAAMH,GAERvB,EAAUW,SACZR,GAAa,MAGjB,CAACG,UAGkC,CACnCY,EACA,CACEZ,MAAAA,EACAgB,KAAAA,EACAI,MAAAA,EACAxB,UAAAA,EACAE,SAAAA"}
\ No newline at end of file
diff --git a/node_modules/use-sound/dist/use-sound.esm.js b/node_modules/use-sound/dist/use-sound.esm.js
index 20b5895..6150d34 100644
--- a/node_modules/use-sound/dist/use-sound.esm.js
+++ b/node_modules/use-sound/dist/use-sound.esm.js
@@ -37,22 +37,18 @@ function useOnMount(callback) {
   useEffect(callback, []);
 }
 
-function useSound(url, _ref) {
-  if (_ref === void 0) {
-    _ref = {};
-  }
-
-  var _ref2 = _ref,
-      _ref2$volume = _ref2.volume,
-      volume = _ref2$volume === void 0 ? 1 : _ref2$volume,
-      _ref2$playbackRate = _ref2.playbackRate,
-      playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,
-      _ref2$soundEnabled = _ref2.soundEnabled,
-      soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,
-      _ref2$interrupt = _ref2.interrupt,
-      interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,
-      onload = _ref2.onload,
-      delegated = _objectWithoutPropertiesLoose(_ref2, ["volume", "playbackRate", "soundEnabled", "interrupt", "onload"]);
+function useSound(url, _temp) {
+  var _ref = _temp === void 0 ? {} : _temp,
+      _ref$volume = _ref.volume,
+      volume = _ref$volume === void 0 ? 1 : _ref$volume,
+      _ref$playbackRate = _ref.playbackRate,
+      playbackRate = _ref$playbackRate === void 0 ? 1 : _ref$playbackRate,
+      _ref$soundEnabled = _ref.soundEnabled,
+      soundEnabled = _ref$soundEnabled === void 0 ? true : _ref$soundEnabled,
+      _ref$interrupt = _ref.interrupt,
+      interrupt = _ref$interrupt === void 0 ? false : _ref$interrupt,
+      onload = _ref.onload,
+      delegated = _objectWithoutPropertiesLoose(_ref, ["volume", "playbackRate", "soundEnabled", "interrupt", "onload"]);
 
   var HowlConstructor = React__default.useRef(null);
   var isMounted = React__default.useRef(false);
@@ -153,7 +149,7 @@ function useSound(url, _ref) {
     if (isMounted.current) {
       sound.once('end', function () {
         // If sound is not looping
-        if (!sound.playing()) {
+        if (isMounted.current && !sound.playing()) {
           setIsPlaying(false);
         }
       });
diff --git a/node_modules/use-sound/dist/use-sound.esm.js.map b/node_modules/use-sound/dist/use-sound.esm.js.map
index 25632b9..fa1ee85 100644
--- a/node_modules/use-sound/dist/use-sound.esm.js.map
+++ b/node_modules/use-sound/dist/use-sound.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"use-sound.esm.js","sources":["../src/use-on-mount.ts","../src/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (!sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n"],"names":["useOnMount","callback","React","useSound","url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause","returnedValue"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"use-sound.esm.js","sources":["../src/use-on-mount.ts","../src/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound(\n  url: string,\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions = {}\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: [url],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the URL changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: [url],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `url` changes. Other changes should have no effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (isMounted.current && !sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n"],"names":["useOnMount","callback","React","useSound","url","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","isPlaying","setIsPlaying","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","src","rate","useEffect","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause","returnedValue"],"mappings":"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"}
\ No newline at end of file
